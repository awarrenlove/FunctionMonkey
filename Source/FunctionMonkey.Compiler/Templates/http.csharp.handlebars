using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Linq;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using FunctionMonkey.Abstractions.Builders.Model;

namespace {{Namespace}}
{
    public static class {{Name}}
    {
        [FunctionName("{{Name}}")]
        public static async Task<IActionResult> Run(
            [HttpTrigger(
                {{{azureAuthenticationType}}},
                {{{httpVerbs}}},
                Route = null)]
            HttpRequest req,
            ILogger log,
            ExecutionContext executionContext)
        {
            log.LogInformation("HTTP trigger function {{Name}} processed a request.");    

            string requestUrl = GetRequestUrl(req);
            var contextSetter = (FunctionMonkey.Abstractions.IContextSetter)
                FunctionMonkey.Runtime.ServiceProvider.GetService(typeof(FunctionMonkey.Abstractions.IContextSetter));
            contextSetter.SetExecutionContext(executionContext.FunctionDirectory,
                executionContext.FunctionAppDirectory,
                executionContext.FunctionName,
                executionContext.InvocationId);
            var headerDictionary = new Dictionary<string, IReadOnlyCollection<string>>();
            foreach (var headerKeyValuesPair in req.Headers)
            {
                string[] values = headerKeyValuesPair.Value.ToArray();
                headerDictionary.Add(headerKeyValuesPair.Key, values);
            }
            contextSetter.SetHttpContext(requestUrl, headerDictionary);

            System.Security.Claims.ClaimsPrincipal principal = null;
            // If we validate tokens then we need to read the header, validate it and retrieve a claims principal. Returning unauthorized if
            // there are any issues
            {{#if ValidatesToken}}
            if (req.Headers["{{TokenHeader}}"].Count == 0)
            {
                return new UnauthorizedResult();
            }
            string authorizationHeader = req.Headers["{{TokenHeader}}"][0];
            if (string.IsNullOrWhiteSpace(authorizationHeader))
            {
                return new UnauthorizedResult();
            }
            var tokenValidator = (FunctionMonkey.Abstractions.ITokenValidator)
                FunctionMonkey.Runtime.ServiceProvider.GetService(typeof({{TokenValidatorTypeName}}));
            principal = await tokenValidator.ValidateAsync(authorizationHeader);
            if (principal == null)
            {
                return new UnauthorizedResult();
            }            
            {{/if}}

            {{#if AuthorizesClaims}}
            var claimsPrincipalAuthorization = ({{ClaimsPrincipalAuthorizationTypeName}})
                FunctionMonkey.Runtime.ServiceProvider.GetService(typeof({{ClaimsPrincipalAuthorizationTypeName}}));
            var claimsPrincipalAuthorizationResult = await claimsPrincipalAuthorization.IsAuthorized(principal, req.Method, requestUrl);
            if (!claimsPrincipalAuthorizationResult)
            {
                return new UnauthorizedResult();
            }
            {{/if}}

            {{#if SerializerNamingStrategyTypeName}}
                var serializerNamingStrategy = new {{SerializerNamingStrategyTypeName}}();
                var deserializerNamingStrategy = new {{DeserializerNamingStrategyTypeName}}();
                FunctionMonkey.Abstractions.ISerializer serializer = new FunctionMonkey.Serialization.NamingStrategyJsonSerializer(deserializerNamingStrategy, serializerNamingStrategy);
            {{else}}
                var serializer = (FunctionMonkey.Abstractions.ISerializer)
                FunctionMonkey.Runtime.ServiceProvider.GetService(typeof({{CommandDeseriaizerTypeName}}));
            {{/if}}

            {{CommandTypeName}} command;
            string requestBody = new StreamReader(req.Body).ReadToEnd();
            
            if (!System.String.IsNullOrWhiteSpace(requestBody))
            {
                command = serializer.Deserialize<{{CommandTypeName}}>(requestBody);
            }
            else
            {
                command = new {{CommandTypeName}}();
            }

            {{#each PossibleFormProperties}}
                command.{{Name}} = req.Form;
            {{/each}}

            Microsoft.Extensions.Primitives.StringValues queryParameterValues;
            string method = req.Method.ToUpper();
            if (method == "GET" || method=="DELETE")
            {
                {{#each PossibleBindingProperties}}
                    {{#unless IsFormCollection}}
                        if (req.Query.TryGetValue("{{Name}}", out queryParameterValues))
                        {
                            {{#if IsString}}
                            command.{{Name}} = queryParameterValues[0];
                            {{else}}
                            {{TypeName}}.TryParse(queryParameterValues[0], out var candidate);
                            command.{{Name}} = candidate;
                            {{/if}}
                        }
                    {{/unless}}
                {{/each}}
            }

            {{#if HeaderBindingConfiguration}}
                {{#if HeaderBindingConfiguration.Enabled}}
                    string headerName;
                    {{#each PossibleBindingProperties}}
                        {{#unless IsFormCollection}}
                            headerName = "{{{mappedHeaderNameForProperty ../HeaderBindingConfiguration}}}";
                            if (!string.IsNullOrWhiteSpace(headerName))
                            {
                            if (req.Headers.TryGetValue(headerName, out var stringValues))
                            {
                            string headerValue = stringValues.FirstOrDefault();
                            {{#if IsString}}
                                command.{{Name}} = headerValue;
                            {{else}}
                                {{TypeName}}.TryParse(headerValue, out var candidate);
                                command.{{Name}} = candidate;
                            {{/if}}
                            }
                            }
                        {{/unless}}
                    {{/each}}
                {{/if}}
            {{/if}}

            {{#each RouteParameters}}
            if (req.Query.TryGetValue("{{Name}}", out queryParameterValues))
            {
                {{#if IsString}}
                command.{{Name}} = queryParameterValues[0];
                {{else}}
                {{TypeName}}.TryParse(queryParameterValues[0], out var candidate);
                command.{{Name}} = candidate;
                {{/if}}
            }
            {{/each}}

            {{#if ValidatesToken}}
            var claimsBinder = (FunctionMonkey.Abstractions.ICommandClaimsBinder)
                FunctionMonkey.Runtime.ServiceProvider.GetService(typeof(FunctionMonkey.Abstractions.ICommandClaimsBinder));
            claimsBinder.Bind(principal, command);
            {{/if}}

            {{#if IsUsingValidator}}
            var validator = (FunctionMonkey.Abstractions.Validation.IValidator)
                FunctionMonkey.Runtime.ServiceProvider.GetService(typeof(FunctionMonkey.Abstractions.Validation.IValidator));
            var validationResult = validator.Validate(command);
            if (!validationResult.IsValid)
            {
                return CreateResponse(400, validationResult, serializer);
            }
            {{/if}}
            
            try
            {
                var result = await FunctionMonkey.Runtime.CommandDispatcher.DispatchAsync(command);
                {{#if CommandResultType}}
                    {{#if HasHttpResponseHandler}}
                        var responseHandler = ({{HttpResponseHandlerType}})FunctionMonkey.Runtime.ServiceProvider.GetService(typeof({{HttpResponseHandlerType}}));
                        var responseTask = responseHandler.CreateResponse(command, result.Result);
                        var handledResponse = responseTask != null ? (await responseTask) : null;
                        return handledResponse ?? CreateResponse(200, result.Result, serializer);
                    {{else}}
                        {{#if IsValidationResult}}
                            FunctionMonkey.Commanding.Abstractions.Validation.ValidationResult validationResult = (FunctionMonkey.Commanding.Abstractions.Validation.ValidationResult)result.Result;
                            if (!validationResult.IsValid)
                            {
                                return CreateResponse(400, validationResult, serializer);
                            }
                        {{/if}}
                        return CreateResponse(200, result.Result, serializer);
                    {{/if}}
                {{else}}
                    {{#if HasHttpResponseHandler}}
                        var responseHandler = ({{HttpResponseHandlerType}})FunctionMonkey.Runtime.ServiceProvider.GetService(typeof({{HttpResponseHandlerType}}));
                        var responseTask = responseHandler.CreateResponse(command, serializer);
                        var handledResponse = responseTask != null ? (await responseTask) : null; 
                        return handledResponse ?? new OkResult();
                    {{else}}
                        return new OkResult();
                    {{/if}}
                {{/if}}
            }
            catch(System.Exception ex)
            {
                {{#if HasHttpResponseHandler}}
                    var responseHandler = ({{HttpResponseHandlerType}})FunctionMonkey.Runtime.ServiceProvider.GetService(typeof({{HttpResponseHandlerType}}));
                    var responseTask = responseHandler.CreateResponse(command, ex);
                    var handledResponse = responseTask != null ? (await responseTask) : null;
                    return handledResponse ?? CreateResponse(500, "Unexpected error", serializer);
                {{else}}
                    log.LogError(ex, $"Error occurred executing command {command.GetType().Name}");
                    return CreateResponse(500, "Unexpected error", serializer);
                {{/if}}
            }
        }

        public static IActionResult CreateResponse(int code, object content, FunctionMonkey.Abstractions.ISerializer serializer)
        {
            ContentResult result = new ContentResult();
            result.Content = serializer.Serialize(content, true);
            result.ContentType = "application/json";
            result.StatusCode = code;
            return result;
        }

        private static string GetRequestUrl(HttpRequest request)
        {
          string str1 = request.Host.Value;
          string str2 = request.PathBase.Value;
          string str3 = request.Path.Value;
          string str4 = request.QueryString.Value;
          return new System.Text.StringBuilder(request.Scheme.Length + "://".Length + str1.Length + str2.Length + str3.Length + str4.Length).Append(request.Scheme).Append("://").Append(str1).Append(str2).Append(str3).Append(str4).ToString();
        }
    }    
}
